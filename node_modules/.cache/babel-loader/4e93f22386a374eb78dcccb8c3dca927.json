{"ast":null,"code":"var _jsxFileName = \"C:\\\\Github\\\\learn\\\\clone-reddit-dev\\\\src\\\\Components\\\\Posts\\\\PostsList.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport IconButton from '@material-ui/core/IconButton';\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'space-around',\n    overflow: 'hidden',\n    backgroundColor: theme.palette.background.paper\n  },\n  gridList: {\n    width: 900,\n    height: '100%'\n  },\n  icon: {\n    color: 'rgba(255, 255, 255, 0.54)'\n  }\n}));\n\nconst PostsList = ({\n  content\n}) => {\n  _s();\n\n  const classes = useStyles();\n\n  if (content) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.root,\n      children: /*#__PURE__*/_jsxDEV(GridList, {\n        cellHeight: 380,\n        cols: 3,\n        className: classes.gridList,\n        children: content.map(tile => /*#__PURE__*/_jsxDEV(GridListTile, {\n          children: [tile.data.is_video === false ? /*#__PURE__*/_jsxDEV(\"img\", {\n            src: tile.data.url,\n            alt: tile.data.author\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 35\n          }, this) : /*#__PURE__*/_jsxDEV(\"video\", {\n            controls: true,\n            src: \"\",\n            poster: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 35\n          }, this), /*#__PURE__*/_jsxDEV(GridListTileBar, {\n            title: tile.data.title,\n            subtitle: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"by: \", tile.data.author]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 43\n            }, this),\n            actionIcon: /*#__PURE__*/_jsxDEV(IconButton, {\n              \"aria-label\": `star ${tile.title}`,\n              className: classes.icon,\n              children: /*#__PURE__*/_jsxDEV(StarBorderIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 56,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 29\n          }, this)]\n        }, tile.data.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PostsList, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c = PostsList;\nexport default PostsList;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostsList\");","map":{"version":3,"sources":["C:/Github/learn/clone-reddit-dev/src/Components/Posts/PostsList.jsx"],"names":["React","makeStyles","GridList","GridListTile","GridListTileBar","ListSubheader","IconButton","StarBorderIcon","useStyles","theme","root","display","flexWrap","justifyContent","overflow","backgroundColor","palette","background","paper","gridList","width","height","icon","color","PostsList","content","classes","map","tile","data","is_video","url","author","title","id"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,OAAOC,eAAP,MAA4B,mCAA5B;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,cAAP,MAA2B,+BAA3B;;AAEA,MAAMC,SAAS,GAAGP,UAAU,CAAEQ,KAAD,KAAY;AACrCC,EAAAA,IAAI,EAAE;AACFC,IAAAA,OAAO,EAAE,MADP;AAEFC,IAAAA,QAAQ,EAAE,MAFR;AAGFC,IAAAA,cAAc,EAAE,cAHd;AAIFC,IAAAA,QAAQ,EAAE,QAJR;AAKFC,IAAAA,eAAe,EAAEN,KAAK,CAACO,OAAN,CAAcC,UAAd,CAAyBC;AALxC,GAD+B;AAQrCC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,KAAK,EAAE,GADD;AAENC,IAAAA,MAAM,EAAE;AAFF,GAR2B;AAYrCC,EAAAA,IAAI,EAAE;AACFC,IAAAA,KAAK,EAAE;AADL;AAZ+B,CAAZ,CAAD,CAA5B;;AAmBA,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiB;AAAA;;AAE/B,QAAMC,OAAO,GAAGlB,SAAS,EAAzB;;AAEA,MAAIiB,OAAJ,EAAa;AACT,wBACI;AAAK,MAAA,SAAS,EAAEC,OAAO,CAAChB,IAAxB;AAAA,6BACI,QAAC,QAAD;AAAU,QAAA,UAAU,EAAE,GAAtB;AAA2B,QAAA,IAAI,EAAE,CAAjC;AAAoC,QAAA,SAAS,EAAEgB,OAAO,CAACP,QAAvD;AAAA,kBAIKM,OAAO,CAACE,GAAR,CAAaC,IAAD,iBACT,QAAC,YAAD;AAAA,qBACMA,IAAI,CAACC,IAAL,CAAUC,QAAV,KAAuB,KAAvB,gBACI;AAAK,YAAA,GAAG,EAAEF,IAAI,CAACC,IAAL,CAAUE,GAApB;AAAyB,YAAA,GAAG,EAAEH,IAAI,CAACC,IAAL,CAAUG;AAAxC;AAAA;AAAA;AAAA;AAAA,kBADJ,gBAEI;AAAO,YAAA,QAAQ,MAAf;AACE,YAAA,GAAG,EAAC,EADN;AAEE,YAAA,MAAM;AAFR;AAAA;AAAA;AAAA;AAAA,kBAHV,eAUI,QAAC,eAAD;AACI,YAAA,KAAK,EAAEJ,IAAI,CAACC,IAAL,CAAUI,KADrB;AAEI,YAAA,QAAQ,eAAE;AAAA,iCAAWL,IAAI,CAACC,IAAL,CAAUG,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFd;AAGI,YAAA,UAAU,eACN,QAAC,UAAD;AAAY,4BAAa,QAAOJ,IAAI,CAACK,KAAM,EAA3C;AAA8C,cAAA,SAAS,EAAEP,OAAO,CAACJ,IAAjE;AAAA,qCACI,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AAJR;AAAA;AAAA;AAAA;AAAA,kBAVJ;AAAA,WAAmBM,IAAI,CAACC,IAAL,CAAUK,EAA7B;AAAA;AAAA;AAAA;AAAA,gBADH;AAJL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AA+BH;;AAED,sBACI;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CA3CD;;GAAMV,S;UAEchB,S;;;KAFdgB,S;AA4CN,eAAeA,SAAf","sourcesContent":["import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport GridList from '@material-ui/core/GridList';\r\nimport GridListTile from '@material-ui/core/GridListTile';\r\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\r\nimport ListSubheader from '@material-ui/core/ListSubheader';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        justifyContent: 'space-around',\r\n        overflow: 'hidden',\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n    gridList: {\r\n        width: 900,\r\n        height: '100%'\r\n    },\r\n    icon: {\r\n        color: 'rgba(255, 255, 255, 0.54)',\r\n    },\r\n}));\r\n\r\n\r\n\r\nconst PostsList = ({ content }) => {\r\n\r\n    const classes = useStyles();\r\n\r\n    if (content) {\r\n        return (\r\n            <div className={classes.root}>\r\n                <GridList cellHeight={380} cols={3} className={classes.gridList}>\r\n                    {/* <GridListTile key=\"Subheader\" cols={2} style={{ height: 'auto', width: '100%' }}>\r\n                        <ListSubheader component=\"div\">Clone reddit content</ListSubheader>\r\n                    </GridListTile> */}\r\n                    {content.map((tile) => (\r\n                        <GridListTile key={tile.data.id}>\r\n                            { tile.data.is_video === false\r\n                                ? <img src={tile.data.url} alt={tile.data.author} />\r\n                                : <video controls\r\n                                    src=\"\"\r\n                                    poster\r\n                                >\r\n\r\n                                </video>\r\n                            }\r\n                            <GridListTileBar\r\n                                title={tile.data.title}\r\n                                subtitle={<span>by: {tile.data.author}</span>}\r\n                                actionIcon={\r\n                                    <IconButton aria-label={`star ${tile.title}`} className={classes.icon}>\r\n                                        <StarBorderIcon />\r\n                                    </IconButton>\r\n                                }\r\n                            />\r\n                        </GridListTile>\r\n                    ))}\r\n                </GridList>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default PostsList\r\n"]},"metadata":{},"sourceType":"module"}