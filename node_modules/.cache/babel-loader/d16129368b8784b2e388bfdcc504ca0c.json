{"ast":null,"code":"var _jsxFileName = \"C:\\\\Github\\\\learn\\\\clone-reddit-dev\\\\src\\\\Components\\\\Posts\\\\PostsList.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport IconButton from '@material-ui/core/IconButton';\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'space-around',\n    overflow: 'hidden',\n    backgroundColor: theme.palette.background.paper\n  },\n  gridList: {\n    width: 1200,\n    height: '100%'\n  },\n  icon: {\n    color: 'rgba(255, 255, 255, 0.54)'\n  }\n}));\n\nconst PostsList = ({\n  content\n}) => {\n  _s();\n\n  const classes = useStyles();\n\n  if (content) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.root,\n      children: /*#__PURE__*/_jsxDEV(GridList, {\n        cellHeight: 380,\n        cols: 3,\n        className: classes.gridList,\n        children: content.map(tile => {\n          if (tile.data.preview) {\n            return /*#__PURE__*/_jsxDEV(GridListTile, {\n              children: [tile.data.is_video === false ? /*#__PURE__*/_jsxDEV(\"img\", {\n                src: tile.data.url,\n                alt: tile.data.author\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 47,\n                columnNumber: 43\n              }, this) : /*#__PURE__*/_jsxDEV(\"video\", {\n                controls: true,\n                autoplay: \"true\",\n                loop: true,\n                src: tile.data.media.reddit_video.fallback_url\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 48,\n                columnNumber: 43\n              }, this), /*#__PURE__*/_jsxDEV(GridListTileBar, {\n                title: tile.data.title,\n                subtitle: /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: [\"posted by: \", /*#__PURE__*/_jsxDEV(\"a\", {\n                    href: 'https://www.reddit.com/user/' + tile.data.author,\n                    target: \"_blank\",\n                    children: [\" \", tile.data.author, \" rel=\\\"noreferrer\\\"\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 56,\n                    columnNumber: 68\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 56,\n                  columnNumber: 51\n                }, this),\n                actionIcon: /*#__PURE__*/_jsxDEV(IconButton, {\n                  \"aria-label\": `star ${tile.title}`,\n                  className: classes.icon,\n                  children: /*#__PURE__*/_jsxDEV(StarBorderIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 59,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 58,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 54,\n                columnNumber: 37\n              }, this)]\n            }, tile.data.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 33\n            }, this);\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PostsList, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c = PostsList;\nexport default PostsList;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostsList\");","map":{"version":3,"sources":["C:/Github/learn/clone-reddit-dev/src/Components/Posts/PostsList.jsx"],"names":["React","makeStyles","GridList","GridListTile","GridListTileBar","ListSubheader","IconButton","StarBorderIcon","useStyles","theme","root","display","flexWrap","justifyContent","overflow","backgroundColor","palette","background","paper","gridList","width","height","icon","color","PostsList","content","classes","map","tile","data","preview","is_video","url","author","media","reddit_video","fallback_url","title","id"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport GridList from '@material-ui/core/GridList';\r\nimport GridListTile from '@material-ui/core/GridListTile';\r\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\r\nimport ListSubheader from '@material-ui/core/ListSubheader';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        justifyContent: 'space-around',\r\n        overflow: 'hidden',\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n    gridList: {\r\n        width: 1200,\r\n        height: '100%'\r\n\r\n    },\r\n    icon: {\r\n        color: 'rgba(255, 255, 255, 0.54)',\r\n    },\r\n}));\r\n\r\n\r\n\r\nconst PostsList = ({ content }) => {\r\n\r\n    const classes = useStyles();\r\n\r\n    if (content) {\r\n        return (\r\n            <div className={classes.root}>\r\n                <GridList cellHeight={380} cols={3} className={classes.gridList}>\r\n                    {/* <GridListTile key=\"Subheader\" cols={2} style={{ height: 'auto', width: '100%' }}>\r\n                        <ListSubheader component=\"div\">Clone reddit content</ListSubheader>\r\n                    </GridListTile> */}\r\n                    {content.map((tile) => {\r\n                        if (tile.data.preview) {\r\n                            return (\r\n\r\n                                <GridListTile key={tile.data.id}>\r\n                                    {tile.data.is_video === false\r\n                                        ? <img src={tile.data.url} alt={tile.data.author} />\r\n                                        : <video controls autoplay='true' loop\r\n                                            src={tile.data.media.reddit_video.fallback_url}\r\n                                        >\r\n\r\n                                        </video>\r\n                                    }\r\n                                    <GridListTileBar\r\n                                        title={tile.data.title}\r\n                                        subtitle={<span>posted by: <a href={'https://www.reddit.com/user/' + tile.data.author} target=\"_blank\"> {tile.data.author} rel=\"noreferrer\"</a></span>}\r\n                                        actionIcon={\r\n                                            <IconButton aria-label={`star ${tile.title}`} className={classes.icon}>\r\n                                                <StarBorderIcon />\r\n                                            </IconButton>\r\n                                        }\r\n                                    />\r\n                                </GridListTile>\r\n                            )\r\n                        }\r\n                    }\r\n                    )}\r\n                </GridList>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default PostsList\r\n"]},"metadata":{},"sourceType":"module"}